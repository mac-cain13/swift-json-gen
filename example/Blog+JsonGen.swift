//
//  Blog+JsonGen.swift
//
//  Auto generated by swift-json-gen on Thu, 19 Nov 2015 16:03:49 GMT
//  See for details: https://github.com/tomlokhorst/swift-json-gen
//

import Foundation

extension Blog {
  static func decodeJson(json: AnyObject) throws -> Blog {
    guard let dict = json as? [String : AnyObject] else {
      throw JsonDecodeError.WrongType(rawValue: json, expectedType: "Object")
    }

    var errors: [String: JsonDecodeError] = [:]

    var id_optional: Int?
    var name_optional: String?
    var author_optional: String??
    var needsPassword_optional: Bool?
    var url_optional: NSURL?

    if let id_field: AnyObject = dict["id"] {
      do {
        id_optional = try Int.decodeJson(id_field)
      }
      catch let error as JsonDecodeError {
        errors["id"] = error
      }
    }
    else {
      errors["id"] = JsonDecodeError.MissingField
    }

    if let name_field: AnyObject = dict["name"] {
      do {
        name_optional = try String.decodeJson(name_field)
      }
      catch let error as JsonDecodeError {
        errors["name"] = error
      }
    }
    else {
      errors["name"] = JsonDecodeError.MissingField
    }

    let author_field: AnyObject? = dict["author"]
    if let author_field = author_field where !(author_field is NSNull) {
      do {
        author_optional = try Optional.decodeJson({ try String.decodeJson($0) }, author_field)
      }
      catch let error as JsonDecodeError {
        errors["author"] = error
      }
    }
    else {
      author_optional = .Some(nil)
    }

    if let needsPassword_field: AnyObject = dict["needsPassword"] {
      do {
        needsPassword_optional = try Bool.decodeJson(needsPassword_field)
      }
      catch let error as JsonDecodeError {
        errors["needsPassword"] = error
      }
    }
    else {
      errors["needsPassword"] = JsonDecodeError.MissingField
    }

    if let url_field: AnyObject = dict["url"] {
      do {
        url_optional = try NSURL.decodeJson(url_field)
      }
      catch let error as JsonDecodeError {
        errors["url"] = error
      }
    }
    else {
      errors["url"] = JsonDecodeError.MissingField
    }

    guard
      let id = id_optional,
      let name = name_optional,
      let author = author_optional,
      let needsPassword = needsPassword_optional,
      let url = url_optional
    else {
      throw JsonDecodeError.StructErrors(type: "Blog", errors: errors)
    }

    return Blog(id: id, name: name, author: author, needsPassword: needsPassword, url: url)
  }

  func encodeJson() -> [String: AnyObject] {
    var dict: [String: AnyObject] = [:]

    dict["id"] = id.encodeJson()
    dict["name"] = name.encodeJson()
    dict["author"] = author.encodeJson({ $0.encodeJson() })
    dict["needsPassword"] = needsPassword.encodeJson()
    dict["url"] = url.encodeJson()

    return dict
  }
}
